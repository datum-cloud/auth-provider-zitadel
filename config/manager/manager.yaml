apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: controller-manager
    app.kubernetes.io/name: auth-provider-zitadel
    app.kubernetes.io/managed-by: kustomize
  name: system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: controller-manager
  namespace: system
  labels:
    control-plane: controller-manager
    app.kubernetes.io/name: auth-provider-zitadel
    app.kubernetes.io/managed-by: kustomize
spec:
  selector:
    matchLabels:
      control-plane: controller-manager
      app.kubernetes.io/name: auth-provider-zitadel
  replicas: 1
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller-manager
        app.kubernetes.io/name: auth-provider-zitadel
    spec:
      # TODO(user): Uncomment the following code to configure the nodeAffinity expression
      # according to the platforms which are supported by your solution.
      # It is considered best practice to support multiple architectures. You can
      # build your manager image using the makefile target docker-buildx.
      # affinity:
      #   nodeAffinity:
      #     requiredDuringSchedulingIgnoredDuringExecution:
      #       nodeSelectorTerms:
      #         - matchExpressions:
      #           - key: kubernetes.io/arch
      #             operator: In
      #             values:
      #               - amd64
      #               - arm64
      #               - ppc64le
      #               - s390x
      #           - key: kubernetes.io/os
      #             operator: In
      #             values:
      #               - linux
      securityContext:
        # Projects are configured by default to adhere to the "restricted" Pod Security Standards.
        # This ensures that deployments meet the highest security requirements for Kubernetes.
        # For more details, see: https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
      - args:
          - controller
          # Leader election configuration
          - --leader-elect=$(LEADER_ELECT)
          - --leader-election-id=$(LEADER_ELECTION_ID)
          - --leader-election-namespace=$(LEADER_ELECTION_NAMESPACE)
          - --leader-election-resource-lock=$(LEADER_ELECTION_RESOURCE_LOCK)
          - --leader-election-lease-duration=$(LEADER_ELECTION_LEASE_DURATION)
          - --leader-election-renew-deadline=$(LEADER_ELECTION_RENEW_DEADLINE)
          - --leader-election-retry-period=$(LEADER_ELECTION_RETRY_PERIOD)
          - --leader-election-release-on-cancel=$(LEADER_ELECTION_RELEASE_ON_CANCEL)
          # Health and metrics configuration
          - --health-probe-bind-address=$(HEALTH_PROBE_BIND_ADDRESS)
          - --metrics-bind-address=$(METRICS_BIND_ADDRESS)
          - --metrics-secure=$(METRICS_SECURE)
          # Global configuration
          - --log-level=$(LOG_LEVEL)
          - --log-format=$(LOG_FORMAT)
          # Zitadel configuration
          - --zitadel-base-url=$(ZITADEL_BASE_URL)
          - --zitadel-machine-account-key-path=$(ZITADEL_MACHINE_ACCOUNT_KEY_PATH)
          # Controller manager configuration
          - --server-config=$(ZITADEL_CONTROLLER_MANAGER_CONFIG_PATH)
        image: ghcr.io/datum-cloud/auth-provider-zitadel:latest
        name: controller-manager
        env:
        # Leader election environment variables
        - name: LEADER_ELECT
          value: "true"
        - name: LEADER_ELECTION_ID
          value: "auth-provider-zitadel-leader"
        - name: LEADER_ELECTION_NAMESPACE
          value: ""  # Uses current namespace
        - name: LEADER_ELECTION_RESOURCE_LOCK
          value: "leases"
        - name: LEADER_ELECTION_LEASE_DURATION
          value: "15s"
        - name: LEADER_ELECTION_RENEW_DEADLINE
          value: "10s"
        - name: LEADER_ELECTION_RETRY_PERIOD
          value: "2s"
        - name: LEADER_ELECTION_RELEASE_ON_CANCEL
          value: "true"
        # Health and metrics environment variables
        - name: HEALTH_PROBE_BIND_ADDRESS
          value: ":8081"
        - name: METRICS_BIND_ADDRESS
          value: ":8443"
        - name: METRICS_SECURE
          value: "true"
        # Global configuration environment variables
        - name: LOG_LEVEL
          value: "info"
        - name: LOG_FORMAT
          value: "json"
        # Zitadel configuration environment variables
        - name: ZITADEL_BASE_URL
          value: "https://zitadel.datum-cloud.com"
        - name: ZITADEL_MACHINE_ACCOUNT_KEY_PATH
          value: "/etc/zitadel/machine-account-key.json"
        # Controller manager configuration environment variables
        - name: ZITADEL_CONTROLLER_MANAGER_CONFIG_PATH
          value: "/etc/zitadel/controller-manager-config.yaml"
        ports:
        - containerPort: 8081
          name: health
          protocol: TCP
        - containerPort: 8443
          name: metrics
          protocol: TCP
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - "ALL"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        # TODO(user): Configure the resources accordingly based on the project requirements.
        # More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        volumeMounts: []
      volumes: []
      serviceAccountName: controller-manager
      terminationGracePeriodSeconds: 10
